# app/services/line_handler.py
import httpx
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from linebot.v3.messaging import AsyncMessagingApi, TextMessage, ReplyMessageRequest, PushMessageRequest
from linebot.v3.webhooks import MessageEvent, TextMessageContent

from app.core.config import settings
from app.db.crud import get_or_create_user_status, set_live_chat_status, save_chat_message
from app.services.ws_manager import manager

async def send_telegram_alert(message: str):
    """‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram"""
    if not settings.TELEGRAM_BOT_TOKEN or not settings.TELEGRAM_CHAT_ID:
        print("Telegram credentials not configured")
        return
        
    api_url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    params = {
        'chat_id': settings.TELEGRAM_CHAT_ID, 
        'text': message, 
        'parse_mode': 'Markdown'
    }
    
    try:
        timeout = httpx.Timeout(10.0)  # 10 seconds timeout
        async with httpx.AsyncClient(timeout=timeout) as client:
            response = await client.get(api_url, params=params)
            response.raise_for_status()
    except Exception as e:
        print(f"Error sending Telegram alert: {e}")

async def handle_message(event: MessageEvent, db: AsyncSession, line_bot_api: AsyncMessagingApi):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE"""
    user_id = event.source.user_id
    reply_token = event.reply_token
    message_text = event.message.text

    # ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_status = await get_or_create_user_status(db, user_id)

    if user_status.is_in_live_chat:
        # ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Live Chat: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        await save_chat_message(db, user_id, 'user', message_text)
        await manager.broadcast({
            "type": "new_message",
            "userId": user_id,
            "message": message_text,
            "displayName": f"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {user_id[-6:]}"
        })
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î auto ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if user_status.chat_mode == 'auto':
            bot_response = f"ü§ñ ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '{message_text}' ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"
            await save_chat_message(db, user_id, 'bot', bot_response)
            
            try:
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[TextMessage(text=bot_response)]
                )
                await line_bot_api.reply_message(reply_request)
            except Exception as e:
                print(f"Error sending LINE auto reply: {e}")
            
            # ‡πÅ‡∏à‡πâ‡∏á Admin UI ‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            await manager.broadcast({
                "type": "bot_auto_reply",
                "userId": user_id,
                "message": bot_response
            })
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î manual ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏≠‡∏∞‡πÑ‡∏£ ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏≠‡∏ö
    else:
        # ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ö‡∏≠‡∏ó
        await save_chat_message(db, user_id, 'user', message_text)
        
        if "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" in message_text or "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" in message_text:
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î Live Chat
            await set_live_chat_status(db, user_id, True)
            response_text = "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞..."
            await save_chat_message(db, user_id, 'bot', response_text)
            
            try:
                # ‡∏™‡πà‡∏á reply message
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[TextMessage(text=response_text)]
                )
                await line_bot_api.reply_message(reply_request)
            except Exception as e:
                print(f"Error sending LINE reply: {e}")
            
            # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram
            alert_message = f"üö® *Human Handoff Request* üö®\n\n*‡∏à‡∏≤‡∏Å:* `{user_id}`\n*‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:* {message_text}"
            await send_telegram_alert(alert_message)
            
            # ‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            await manager.broadcast({
                "type": "new_user_request",
                "userId": user_id,
                "message": message_text,
                "displayName": f"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {user_id[-6:]}",  # ‡πÉ‡∏ä‡πâ 6 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                "timestamp": datetime.now().isoformat()
            })
        else:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏ö‡∏≠‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏Ñ‡πÇ‡∏Ñ‡πà)
            response_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏°‡∏≤ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' ‡∏Ñ‡πà‡∏∞"
            await save_chat_message(db, user_id, 'bot', response_text)
            
            try:
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[TextMessage(text=response_text)]
                )
                await line_bot_api.reply_message(reply_request)
            except Exception as e:
                print(f"Error sending LINE reply: {e}")
