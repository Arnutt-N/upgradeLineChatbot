# app/api/routers/admin.py - ‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
from fastapi import APIRouter, Request, HTTPException, Depends, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
import json
from linebot.v3.messaging import (
    AsyncApiClient, AsyncMessagingApi, Configuration, 
    TextMessage, PushMessageRequest, ShowLoadingAnimationRequest
)

from app.utils.timezone import convert_to_thai_time, get_thai_time
from app.core.config import settings
from app.db.database import get_db

# Import CRUD functions ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
from app.db.crud import (
    set_live_chat_status, 
    set_chat_mode,
    get_or_create_user_status
)

# ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
from app.db.crud_enhanced import (
    save_chat_to_history,
    get_all_chat_history_by_user,
    get_users_with_history,
    get_latest_chat_in_history
)

from app.schemas.chat import ReplyPayload, EndChatPayload, ToggleModePayload
from app.services.ws_manager import manager

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Templates
templates = Jinja2Templates(directory="templates")

def get_line_bot_api():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Bot API client"""
    configuration = Configuration(access_token=settings.LINE_CHANNEL_ACCESS_TOKEN)
    async_api_client = AsyncApiClient(configuration)
    return AsyncMessagingApi(async_api_client)

router = APIRouter()

@router.get("/", response_class=HTMLResponse)
async def get_home_page(request: Request):
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å - redirect ‡πÑ‡∏õ admin"""
    return templates.TemplateResponse("admin.html", {"request": request})

@router.get("/admin", response_class=HTMLResponse)
async def get_admin_page(request: Request):
    """‡∏´‡∏ô‡πâ‡∏≤ Admin Panel ‡∏û‡∏£‡πâ‡∏≠‡∏° Loading Animation"""
    return templates.TemplateResponse("admin.html", {"request": request})

@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Real-time Updates"""
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            # Handle client messages if needed
            try:
                client_data = json.loads(data)
                if client_data.get("type") == "ping":
                    await websocket.send_text(json.dumps({"type": "pong", "timestamp": datetime.now().isoformat()}))
            except json.JSONDecodeError:
                pass  # Ignore invalid JSON
    except WebSocketDisconnect:
        manager.disconnect(websocket)

@router.post("/admin/reply")
async def admin_reply(payload: ReplyPayload, db: AsyncSession = Depends(get_db)):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏° Loading Animation"""
    try:
        print(f"üîÑ Admin replying to user {payload.user_id}: {payload.message}")
        line_bot_api = get_line_bot_api()
        
        # 1. ‡πÅ‡∏™‡∏î‡∏á Loading Animation ‡πÉ‡∏ô LINE Chat (‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°)
        try:
            loading_request = ShowLoadingAnimationRequest(
                chat_id=payload.user_id,
                loading_seconds=3  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            )
            await line_bot_api.show_loading_animation(loading_request)
            print(f"‚úÖ Loading animation shown successfully for user {payload.user_id}")
        except Exception as loading_error:
            print(f"‚ö†Ô∏è Loading animation failed (not critical): {loading_error}")
            # ‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        
        # 2. Broadcast loading state ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin Panel
        await manager.broadcast({
            "type": "admin_sending",
            "userId": payload.user_id,
            "message": "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
        })
        
        # 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á Admin
        try:
            await save_chat_to_history(
                db=db, 
                user_id=payload.user_id, 
                message_type='admin', 
                message_content=payload.message,
                admin_user_id="system_admin"  # ‡πÄ‡∏û‡∏¥‡πà‡∏° admin_user_id
            )
            print(f"‚úÖ Chat history saved for admin message")
        except Exception as save_error:
            print(f"‚ö†Ô∏è Failed to save chat history: {save_error}")
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        
        # 4. ‡∏™‡πà‡∏á Push Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
        try:
            push_request = PushMessageRequest(
                to=payload.user_id,
                messages=[TextMessage(text=payload.message)]
            )
            await line_bot_api.push_message(push_request)
            print(f"‚úÖ Push message sent successfully to {payload.user_id}")
        except Exception as push_error:
            print(f"‚ùå Failed to send push message: {push_error}")
            # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡πà‡∏á success response ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        
        # 5. Broadcast success ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin Panel
        await manager.broadcast({
            "type": "message_sent",
            "userId": payload.user_id,
            "message": payload.message,
            "timestamp": datetime.now().isoformat()
        })

        return {
            "status": "success",
            "message": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            "user_id": payload.user_id
        }
        
    except Exception as e:
        print(f"‚ùå Critical error in admin_reply: {e}")
        import traceback
        traceback.print_exc()
        
        # Broadcast error ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin Panel
        await manager.broadcast({
            "type": "send_error",
            "userId": payload.user_id,
            "error": str(e)
        })
        
        raise HTTPException(status_code=500, detail=f"Failed to send message: {str(e)}")

@router.get("/admin/users")
async def get_users_list(db: AsyncSession = Depends(get_db)):
    """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - Enhanced Version"""
    try:
        print("üîÑ Loading users list from database...")
        
        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        users_data = await get_users_with_history(db)
        
        if not users_data:
            print("‚ö†Ô∏è No users found in database")
            return {
                "users": [],
                "message": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                "count": 0
            }
        
        print(f"üìä Processing {len(users_data)} users...")
        users_list = []
        
        for user_data in users_data:
            try:
                user_id = user_data.user_id
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                latest_message = await get_latest_chat_in_history(db, user_id)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                user_info = {
                    "user_id": user_id,
                    "display_name": user_data.display_name or f"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {user_id[-6:]}",
                    "picture_url": user_data.picture_url or "/static/images/avatars/default_user_avatar.png",
                    "is_in_live_chat": getattr(user_data, 'is_in_live_chat', False),
                    "chat_mode": getattr(user_data, 'chat_mode', 'manual'),
                    "latest_message": latest_message.message_content if latest_message else "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó",
                    "last_activity": latest_message.timestamp.isoformat() if latest_message else None,
                    "unread_count": 0,  # ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
                    "online_status": "online" if getattr(user_data, 'is_in_live_chat', False) else "offline"
                }
                
                users_list.append(user_info)
                
            except Exception as user_error:
                print(f"‚ö†Ô∏è Error processing user {getattr(user_data, 'user_id', 'unknown')}: {user_error}")
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° fallback user entry
                try:
                    users_list.append({
                        "user_id": getattr(user_data, 'user_id', f'user_{len(users_list)}'),
                        "display_name": f"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {getattr(user_data, 'user_id', 'unknown')[-6:]}",
                        "picture_url": "/static/images/avatars/default_user_avatar.png",
                        "is_in_live_chat": False,
                        "chat_mode": "manual",
                        "latest_message": f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(user_error)[:50]}...",
                        "last_activity": None,
                        "unread_count": 0,
                        "online_status": "offline"
                    })
                except:
                    continue
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° last_activity
        users_list.sort(key=lambda x: x['last_activity'] or '1900-01-01', reverse=True)
        
        print(f"‚úÖ Successfully loaded {len(users_list)} users for admin panel")
        
        return {
            "users": users_list,
            "count": len(users_list),
            "message": f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {len(users_list)} ‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
        }
        
    except Exception as e:
        print(f"‚ùå Critical error in get_users_list: {e}")
        import traceback
        traceback.print_exc()
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
        return {
            "users": [],
            "count": 0,
            "error": str(e),
            "message": f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: {str(e)[:100]}...",
            "success": False
        }

@router.get("/admin/messages/{user_id}")
async def get_user_messages(user_id: str, db: AsyncSession = Depends(get_db)):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - Enhanced Version"""
    try:
        print(f"üîÑ Loading messages for user: {user_id}")
        
        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏° fallback
        messages = await get_all_chat_history_by_user(db, user_id, limit=200)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° limit
        
        if not messages:
            print(f"‚ö†Ô∏è No messages found for user: {user_id}")
            return {
                "messages": [],
                "count": 0,
                "user_id": user_id,
                "message": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"
            }
        
        print(f"üìä Processing {len(messages)} messages for user: {user_id}")
        messages_list = []
        
        for index, msg in enumerate(messages):
            try:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
                try:
                    thai_time = convert_to_thai_time(msg.timestamp)
                    formatted_time = thai_time.isoformat()
                except Exception as time_error:
                    print(f"‚ö†Ô∏è Time conversion error: {time_error}")
                    formatted_time = datetime.now().isoformat()
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                message_info = {
                    "id": getattr(msg, 'id', f"msg_{index}"),
                    "message": getattr(msg, 'message_content', '') or getattr(msg, 'message', ''),
                    "sender_type": getattr(msg, 'message_type', 'unknown') or getattr(msg, 'sender_type', 'unknown'),
                    "created_at": formatted_time,
                    "user_id": user_id,
                    "is_read": getattr(msg, 'is_read', True)
                }
                
                messages_list.append(message_info)
                
            except Exception as msg_error:
                print(f"‚ö†Ô∏è Error processing message {index}: {msg_error}")
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° fallback message
                messages_list.append({
                    "id": f"error_msg_{index}",
                    "message": f"[‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {str(msg_error)[:50]}...]",
                    "sender_type": "system",
                    "created_at": datetime.now().isoformat(),
                    "user_id": user_id,
                    "is_read": True
                })
        
        print(f"‚úÖ Successfully processed {len(messages_list)} messages for user: {user_id}")
        
        return {
            "messages": messages_list,
            "count": len(messages_list),
            "user_id": user_id,
            "message": f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° {len(messages_list)} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
        }
        
    except Exception as e:
        print(f"‚ùå Critical error loading messages for user {user_id}: {e}")
        import traceback
        traceback.print_exc()
        
        return {
            "messages": [],
            "count": 0,
            "user_id": user_id,
            "error": str(e),
            "message": f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: {str(e)[:100]}...",
            "success": False
        }

@router.get("/admin/status")
async def get_system_status(db: AsyncSession = Depends(get_db)):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    try:
        print("üîç Checking comprehensive system status...")
        
        system_checks = {}
        overall_status = "healthy"
        
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database
        db_status = {"available": False, "error": None, "stats": {}}
        try:
            from sqlalchemy import text
            # Test basic connection
            result = await db.execute(text("SELECT 1"))
            result.fetchone()
            
            # Get table statistics
            try:
                user_result = await db.execute(text("SELECT COUNT(*) FROM user_status"))
                user_count = user_result.scalar()
                
                chat_result = await db.execute(text("SELECT COUNT(*) FROM chat_history"))
                chat_count = chat_result.scalar()
                
                db_status.update({
                    "available": True,
                    "stats": {
                        "users": user_count,
                        "messages": chat_count
                    }
                })
            except Exception as stats_error:
                print(f"‚ö†Ô∏è Could not get database stats: {stats_error}")
                db_status["available"] = True  # Connection works, just no stats
                
        except Exception as db_error:
            db_status["error"] = str(db_error)
            overall_status = "degraded"
            
        system_checks["database"] = db_status
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö WebSocket
        try:
            from app.services.ws_manager import manager
            ws_count = manager.get_connection_count()
            system_checks["websocket"] = {
                "available": True,
                "connections": ws_count
            }
        except Exception as ws_error:
            system_checks["websocket"] = {
                "available": False,
                "error": str(ws_error)
            }
            if overall_status == "healthy":
                overall_status = "degraded"
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Bot Configuration
        line_configured = bool(settings.LINE_CHANNEL_ACCESS_TOKEN and settings.LINE_CHANNEL_SECRET)
        system_checks["line_bot"] = {
            "configured": line_configured,
            "status": "ready" if line_configured else "not_configured"
        }
        
        if not line_configured:
            overall_status = "error"
        
        # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gemini AI
        try:
            from app.services.gemini_service import check_gemini_availability
            ai_available = await check_gemini_availability()
            system_checks["ai_service"] = {
                "available": ai_available,
                "status": "ready" if ai_available else "unavailable"
            }
        except Exception as ai_error:
            system_checks["ai_service"] = {
                "available": False,
                "error": str(ai_error),
                "status": "error"
            }
            if overall_status == "healthy":
                overall_status = "degraded"
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        thai_time = get_thai_time()
        
        return {
            "overall_status": overall_status,
            "timestamp": thai_time.isoformat(),
            "checks": system_checks,
            "environment": settings.ENVIRONMENT,
            "version": settings.APP_VERSION,
            "summary": {
                "total_checks": len(system_checks),
                "healthy": sum(1 for check in system_checks.values() 
                              if check.get('available', check.get('configured', False))),
                "issues": sum(1 for check in system_checks.values() 
                             if not check.get('available', check.get('configured', False)))
            }
        }
        
    except Exception as e:
        print(f"‚ùå System status check failed: {e}")
        return {
            "overall_status": "error",
            "timestamp": datetime.now().isoformat(),
            "error": str(e),
            "checks": {}
        }

# ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoints ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
@router.post("/admin/end_chat")
async def end_chat(payload: EndChatPayload, db: AsyncSession = Depends(get_db)):
    """‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
    try:
        line_bot_api = get_line_bot_api()
        await set_live_chat_status(db, payload.user_id, False)
        
        end_message = "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
        
        try:
            push_request = PushMessageRequest(to=payload.user_id, messages=[TextMessage(text=end_message)])
            await line_bot_api.push_message(push_request)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
            await save_chat_to_history(
                db=db, 
                user_id=payload.user_id, 
                message_type='bot', 
                message_content=end_message
            )
        except Exception as e:
            print(f"Error ending chat: {e}")
            
        return {"status": "success", "message": "‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/admin/toggle_mode")
async def toggle_mode(payload: ToggleModePayload, db: AsyncSession = Depends(get_db)):
    """‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó"""
    try:
        await set_chat_mode(db, payload.user_id, payload.mode)
        
        mode_text = "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡πÄ‡∏≠‡∏á" if payload.mode == 'manual' else "‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
        
        await manager.broadcast({
            "type": "mode_changed",
            "userId": payload.user_id,
            "mode": payload.mode,
            "message": f"üîÑ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {mode_text}"
        })
        
        return {"status": "success", "mode": payload.mode, "message": mode_text}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
