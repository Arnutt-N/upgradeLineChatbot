#!/usr/bin/env python3
"""
üîê SECRET_KEY Generator for LINE Chatbot Project
‡∏™‡∏£‡πâ‡∏≤‡∏á SECRET_KEY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô environment variables
"""

import secrets
import string
import pyperclip  # pip install pyperclip (optional)

def generate_secret_keys():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á SECRET_KEY ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
    
    print("üîê SECRET_KEY Generator for FastAPI")
    print("=" * 60)
    print()
    
    # Generate different types
    hex_32 = secrets.token_hex(32)  # 64 chars
    hex_64 = secrets.token_hex(64)  # 128 chars
    urlsafe = secrets.token_urlsafe(32)  # ~43 chars
    
    # Custom alphanumeric
    alphabet = string.ascii_letters + string.digits
    alphanumeric = ''.join(secrets.choice(alphabet) for _ in range(64))
    
    print("üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å SECRET_KEY ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:\n")
    
    print("1Ô∏è‚É£ Standard (Recommended):")
    print(f"   {hex_32}")
    print(f"   Length: {len(hex_32)} chars\n")
    
    print("2Ô∏è‚É£ Extra Strong:")
    print(f"   {hex_64}")
    print(f"   Length: {len(hex_64)} chars\n")
    
    print("3Ô∏è‚É£ URL-Safe Base64:")
    print(f"   {urlsafe}")
    print(f"   Length: {len(urlsafe)} chars\n")
    
    print("4Ô∏è‚É£ Alphanumeric Only:")
    print(f"   {alphanumeric}")
    print(f"   Length: {len(alphanumeric)} chars\n")
    
    # User selection
    while True:
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (1-4) ‡∏´‡∏£‡∏∑‡∏≠ Enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö default [1]: ").strip()
        if not choice:
            choice = "1"
        
        if choice == "1":
            selected = hex_32
            break
        elif choice == "2":
            selected = hex_64
            break
        elif choice == "3":
            selected = urlsafe
            break
        elif choice == "4":
            selected = alphanumeric
            break
        else:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-4")
    
    print(f"\n‚úÖ SECRET_KEY ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:")
    print(f"   {selected}")
    
    # Try to copy to clipboard
    try:
        pyperclip.copy(selected)
        print("\nüìã Copied to clipboard!")
    except:
        print("\nüí° Tip: Install pyperclip ‡πÄ‡∏û‡∏∑‡πà‡∏≠ copy ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: pip install pyperclip")
    
    # Show how to use
    print("\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå .env ‡∏´‡∏£‡∏∑‡∏≠ .env.production")
    print("2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ:")
    print(f"   SECRET_KEY={selected}")
    print("\n‚ö†Ô∏è  ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°:")
    print("   - ‡πÉ‡∏™‡πà .env ‡πÉ‡∏ô .gitignore")
    print("   - ‡πÑ‡∏°‡πà commit SECRET_KEY ‡∏•‡∏á GitHub")
    print("   - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ environment")
    
    # Save option
    save = input("\nüíæ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env.example? (y/n): ")
    if save.lower() == 'y':
        with open('.env.example.generated', 'w') as f:
            f.write("# Generated Environment Variables Example\n")
            f.write("# Copy this to .env and fill in actual values\n\n")
            f.write(f"SECRET_KEY={selected}\n")
            f.write("DATABASE_URL=your_database_url_here\n")
            f.write("LINE_CHANNEL_SECRET=your_line_channel_secret\n")
            f.write("LINE_CHANNEL_ACCESS_TOKEN=your_line_channel_access_token\n")
            f.write("GEMINI_API_KEY=your_gemini_api_key\n")
        print("‚úÖ Created .env.example.generated")

if __name__ == "__main__":
    generate_secret_keys()
