# app/api/routers/admin.py
from fastapi import APIRouter, Request, HTTPException, Depends, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession
from linebot.v3.messaging import AsyncApiClient, AsyncMessagingApi, Configuration, TextMessage, PushMessageRequest

from app.core.config import settings
from app.db.database import get_db
from app.db.crud import (
    save_chat_message, 
    set_live_chat_status, 
    set_chat_mode,
    get_chat_messages,
    get_users_with_messages,
    get_or_create_user_status
)
from app.schemas.chat import ReplyPayload, EndChatPayload, ToggleModePayload
from app.services.ws_manager import manager

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Templates - ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å root project directory
templates = Jinja2Templates(directory="templates")

def get_line_bot_api():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Bot API client"""
    configuration = Configuration(access_token=settings.LINE_CHANNEL_ACCESS_TOKEN)
    async_api_client = AsyncApiClient(configuration)
    return AsyncMessagingApi(async_api_client)

router = APIRouter()

@router.get("/", response_class=HTMLResponse, summary="‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å")
async def get_home_page(request: Request):
    """Redirect to admin page"""
    return templates.TemplateResponse("admin.html", {"request": request})

@router.get("/admin", response_class=HTMLResponse, summary="‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Live Chat ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
async def get_admin_page(request: Request):
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå admin.html"""
    return templates.TemplateResponse("admin.html", {"request": request})

@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebSocket ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Admin UI ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤"""
    await manager.connect(websocket)
    try:
        while True:
            # ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
            data = await websocket.receive_text()
    except WebSocketDisconnect:
        manager.disconnect(websocket)

@router.post("/admin/reply", summary="API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")
async def admin_reply(payload: ReplyPayload, db: AsyncSession = Depends(get_db)):
    """
    ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Admin UI, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB,
    ‡∏™‡πà‡∏á Push Message ‡πÑ‡∏õ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡πÅ‡∏•‡∏∞ Broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin UI ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    """
    try:
        line_bot_api = get_line_bot_api()
        
        # 1. ‡πÅ‡∏™‡∏î‡∏á loading animation ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        try:
            from linebot.v3.messaging import ShowLoadingAnimationRequest
            loading_request = ShowLoadingAnimationRequest(
                chat_id=payload.user_id,
                loading_seconds=3  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            )
            await line_bot_api.show_loading_animation(loading_request)
        except Exception as e:
            print(f"Error showing loading animation: {e}")
        
        # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏•‡∏á DB
        await save_chat_message(db, payload.user_id, 'admin', payload.message)
        
        # 3. ‡∏™‡πà‡∏á Push Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô LINE API
        try:
            from linebot.v3.messaging import PushMessageRequest
            push_request = PushMessageRequest(
                to=payload.user_id,
                messages=[TextMessage(text=payload.message)]
            )
            await line_bot_api.push_message(push_request)
        except Exception as e:
            print(f"Error sending LINE push message: {e}")
        
        # 3. Broadcast ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å Admin UI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á)
        # await manager.broadcast({
        #     "type": "admin_reply",
        #     "userId": payload.user_id,
        #     "message": payload.message
        # })
        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/admin/end_chat", summary="API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤")
async def end_chat(payload: EndChatPayload, db: AsyncSession = Depends(get_db)):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ö‡∏≠‡∏ó"""
    try:
        line_bot_api = get_line_bot_api()
        
        await set_live_chat_status(db, payload.user_id, False)
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        end_message = "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
        
        try:
            push_request = PushMessageRequest(
                to=payload.user_id,
                messages=[TextMessage(text=end_message)]
            )
            await line_bot_api.push_message(push_request)
        except Exception as e:
            print(f"Error sending LINE end chat message: {e}")
            
        await save_chat_message(db, payload.user_id, 'bot', end_message)

        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/admin/toggle_mode", summary="API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó")
async def toggle_mode(payload: ToggleModePayload, db: AsyncSession = Depends(get_db)):
    """‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á manual ‡πÅ‡∏•‡∏∞ auto"""
    try:
        await set_chat_mode(db, payload.user_id, payload.mode)
        
        # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        mode_text = "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡πÄ‡∏≠‡∏á" if payload.mode == 'manual' else "‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
        notification = f"üîÑ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {mode_text}"
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin UI
        await manager.broadcast({
            "type": "mode_changed",
            "userId": payload.user_id,
            "mode": payload.mode,
            "message": notification
        })
        
        return {"status": "ok", "mode": payload.mode}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/admin/restart_chat", summary="API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà")
async def restart_chat(payload: EndChatPayload, db: AsyncSession = Depends(get_db)):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô live chat"""
    try:
        await set_live_chat_status(db, payload.user_id, True)
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß
        restart_message = "üü¢ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
        
        try:
            push_request = PushMessageRequest(
                to=payload.user_id,
                messages=[TextMessage(text=restart_message)]
            )
            await line_bot_api.push_message(push_request)
        except Exception as e:
            print(f"Error sending LINE restart message: {e}")
            
        await save_chat_message(db, payload.user_id, 'bot', restart_message)

        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/admin/users", summary="API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó")
async def get_users_list(db: AsyncSession = Depends(get_db)):
    """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó"""
    try:
        from app.db.crud import get_users_with_messages, get_latest_message
        
        users_data = await get_users_with_messages(db)
        users_list = []
        
        for user_data in users_data:
            user_id = user_data.user_id
            display_name = user_data.display_name
            picture_url = user_data.picture_url
            is_in_live_chat = user_data.is_in_live_chat
            chat_mode = user_data.chat_mode
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest_message = await get_latest_message(db, user_id)
            
            users_list.append({
                "user_id": user_id,
                "display_name": display_name or f"Customer {user_id[-6:]}",  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                "picture_url": picture_url,  # ‡∏™‡πà‡∏á picture URL ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                "is_in_live_chat": is_in_live_chat,
                "chat_mode": chat_mode,
                "latest_message": latest_message.message if latest_message else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                "last_activity": latest_message.created_at.isoformat() if latest_message else None
            })
        
        return {"users": users_list}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/admin/messages/{user_id}", summary="API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
async def get_user_messages(user_id: str, db: AsyncSession = Depends(get_db)):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á"""
    try:
        from app.db.crud import get_chat_messages
        
        messages = await get_chat_messages(db, user_id)
        messages_list = []
        
        for msg in messages:
            messages_list.append({
                "id": msg.id,
                "message": msg.message,
                "sender_type": msg.sender_type,
                "created_at": msg.created_at.isoformat()
            })
        
        return {"messages": messages_list}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
