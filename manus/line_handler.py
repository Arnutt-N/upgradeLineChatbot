# app/services/line_handler.py
import httpx
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from linebot.v3.messaging import AsyncMessagingApi, TextMessage, ReplyMessageRequest, PushMessageRequest, ShowLoadingAnimationRequest
from linebot.v3.webhooks import MessageEvent, TextMessageContent

from app.core.config import settings
from app.db.crud import get_or_create_user_status, set_live_chat_status, save_chat_message
from app.services.ws_manager import manager

async def show_loading_animation(line_bot_api: AsyncMessagingApi, user_id: str):
    """‡πÅ‡∏™‡∏î‡∏á loading animation ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô"""
    try:
        loading_request = ShowLoadingAnimationRequest(
            chat_id=user_id,
            loading_seconds=3  # ‡πÅ‡∏™‡∏î‡∏á animation 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏õ‡πá‡∏ô 3)
        )
        await line_bot_api.show_loading_animation(loading_request)
        print(f"‚úÖ Loading animation sent to user: {user_id}")
    except Exception as e:
        print(f"‚ùå Error showing loading animation: {e}")
        # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏ô‡∏µ‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        pass

async def get_user_profile(line_bot_api: AsyncMessagingApi, user_id: str):
    """‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE API - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    try:
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å LINE API
        print(f"üîç Attempting to get profile for user: {user_id}")
        
        # ‡πÉ‡∏ä‡πâ LINE Bot SDK v3 - ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        profile = await line_bot_api.get_profile(user_id)
        if profile and hasattr(profile, 'display_name'):
            print(f"‚úÖ Successfully got profile: {profile.display_name}")
            return profile.display_name
        else:
            print(f"‚ö†Ô∏è Profile response exists but no display_name")
            
    except Exception as e:
        print(f"‚ùå Error getting user profile for {user_id}: {type(e).__name__}: {e}")
        
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ httpx ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ñ‡πâ‡∏≤ SDK ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        try:
            print(f"üîÑ Trying direct API call for user: {user_id}")
            return await get_user_profile_direct(user_id)
        except Exception as e2:
            print(f"‚ùå Direct API also failed: {type(e2).__name__}: {e2}")
    
    # ‡πÉ‡∏ä‡πâ fallback name
    fallback_name = f"Customer {user_id[-6:]}"
    print(f"üîß Using fallback name: {fallback_name}")
    return fallback_name

async def get_user_profile_direct(user_id: str):
    """‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ httpx ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    try:
        headers = {
            'Authorization': f'Bearer {settings.LINE_CHANNEL_ACCESS_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f'https://api.line.me/v2/bot/profile/{user_id}',
                headers=headers,
                timeout=10.0
            )
            
            if response.status_code == 200:
                data = response.json()
                display_name = data.get('displayName', f"Customer {user_id[-6:]}")
                print(f"‚úÖ Direct API success: {display_name}")
                return display_name
            else:
                print(f"‚ùå Direct API failed with status: {response.status_code}")
                return f"Customer {user_id[-6:]}"
                
    except Exception as e:
        print(f"‚ùå Direct API exception: {type(e).__name__}: {e}")
        return f"Customer {user_id[-6:]}"

async def send_telegram_alert(message: str):
    """‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram"""
    if not settings.TELEGRAM_BOT_TOKEN or not settings.TELEGRAM_CHAT_ID:
        print("Telegram credentials not configured")
        return
        
    api_url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    params = {
        'chat_id': settings.TELEGRAM_CHAT_ID, 
        'text': message, 
        'parse_mode': 'Markdown'
    }
    
    try:
        timeout = httpx.Timeout(10.0)  # 10 seconds timeout
        async with httpx.AsyncClient(timeout=timeout) as client:
            response = await client.get(api_url, params=params)
            response.raise_for_status()
            print(f"‚úÖ Telegram alert sent successfully")
    except Exception as e:
        print(f"‚ùå Error sending Telegram alert: {e}")

async def handle_message(event: MessageEvent, db: AsyncSession, line_bot_api: AsyncMessagingApi):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE"""
    user_id = event.source.user_id
    reply_token = event.reply_token
    message_text = event.message.text

    print(f"üì© Message from {user_id}: {message_text}")
    
    # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô (‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠)
    user_display_name = await get_user_profile(line_bot_api, user_id)
    print(f"üë§ User display name: {user_display_name}")

    # ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠
    user_status = await get_or_create_user_status(db, user_id, user_display_name)

    if user_status.is_in_live_chat:
        # ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Live Chat: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        await save_chat_message(db, user_id, 'user', message_text)
        
        await manager.broadcast({
            "type": "new_message",
            "userId": user_id,
            "message": message_text,
            "displayName": user_display_name
        })
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î auto ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if user_status.chat_mode == 'auto':
            # ‡πÅ‡∏™‡∏î‡∏á loading animation ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏≠‡∏ö
            await show_loading_animation(line_bot_api, user_id)
            
            bot_response = f"ü§ñ ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '{message_text}' ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"
            await save_chat_message(db, user_id, 'bot', bot_response)
            
            try:
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[TextMessage(text=bot_response)]
                )
                await line_bot_api.reply_message(reply_request)
            except Exception as e:
                print(f"Error sending LINE auto reply: {e}")
            
            # ‡πÅ‡∏à‡πâ‡∏á Admin UI ‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            await manager.broadcast({
                "type": "bot_auto_reply",
                "userId": user_id,
                "message": bot_response
            })
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î manual ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏≠‡∏∞‡πÑ‡∏£ ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏≠‡∏ö
    else:
        # ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ö‡∏≠‡∏ó
        await save_chat_message(db, user_id, 'user', message_text)
        
        if "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" in message_text or "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" in message_text:
            # ‡πÅ‡∏™‡∏î‡∏á loading animation ‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            await show_loading_animation(line_bot_api, user_id)
            
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î Live Chat
            await set_live_chat_status(db, user_id, True, user_display_name)
            response_text = "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞..."
            await save_chat_message(db, user_id, 'bot', response_text)
            
            try:
                # ‡∏™‡πà‡∏á reply message
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[TextMessage(text=response_text)]
                )
                await line_bot_api.reply_message(reply_request)
            except Exception as e:
                print(f"Error sending LINE reply: {e}")
            
            # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram
            alert_message = f"üö® *Human Handoff Request* üö®\n\n*‡∏à‡∏≤‡∏Å:* {user_display_name}\n*‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:* {message_text}"
            await send_telegram_alert(alert_message)
            
            # ‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            await manager.broadcast({
                "type": "new_user_request",
                "userId": user_id,
                "message": message_text,
                "displayName": user_display_name,  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
                "timestamp": datetime.now().isoformat()
            })
        else:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏ö‡∏≠‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏Ñ‡πÇ‡∏Ñ‡πà)
            # ‡πÅ‡∏™‡∏î‡∏á loading animation ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏≠‡∏ö
            await show_loading_animation(line_bot_api, user_id)
            
            response_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏°‡∏≤ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' ‡∏Ñ‡πà‡∏∞"
            await save_chat_message(db, user_id, 'bot', response_text)
            
            try:
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[TextMessage(text=response_text)]
                )
                await line_bot_api.reply_message(reply_request)
            except Exception as e:
                print(f"Error sending LINE reply: {e}")
