"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rollback ‡πÅ‡∏•‡∏∞ Migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite ‡πÑ‡∏õ‡∏¢‡∏±‡∏á PostgreSQL
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Render + Supabase
"""
import asyncio
import os
import json
from datetime import datetime
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, text
from dotenv import load_dotenv

# Load environment variables
load_dotenv('.env.postgres')  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå .env.postgres ‡∏ó‡∏µ‡πà‡∏°‡∏µ DATABASE_URL ‡∏Ç‡∏≠‡∏á PostgreSQL

# Import models
from app.db.models import Base, UserStatus, ChatHistory, FriendActivity

async def export_sqlite_data():
    """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite ‡πÄ‡∏õ‡πá‡∏ô JSON"""
    print("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á engine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQLite
    sqlite_engine = create_async_engine("sqlite+aiosqlite:///./chatbot.db")
    async_session = sessionmaker(sqlite_engine, class_=AsyncSession, expire_on_commit=False)
    
    data = {
        "user_status": [],
        "chat_history": [],
        "friend_activity": [],
        "export_date": datetime.now().isoformat()
    }
    
    async with async_session() as session:
        # Export UserStatus
        print("  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å UserStatus...")
        result = await session.execute(select(UserStatus))
        users = result.scalars().all()
        for user in users:
            data["user_status"].append({
                "user_id": user.user_id,
                "display_name": user.display_name,
                "picture_url": user.picture_url,
                "is_in_live_chat": user.is_in_live_chat,
                "chat_mode": user.chat_mode,
                "created_at": user.created_at.isoformat() if user.created_at else None,
                "updated_at": user.updated_at.isoformat() if user.updated_at else None
            })
        print(f"    ‚úì ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å {len(users)} users")
        
        # Export ChatHistory (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)
        print("  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å ChatHistory...")
        result = await session.execute(
            select(ChatHistory).order_by(ChatHistory.timestamp.desc())
        )
        chats = result.scalars().all()
        for chat in chats:
            data["chat_history"].append({
                "id": chat.id,
                "user_id": chat.user_id,
                "message_type": chat.message_type,
                "message_content": chat.message_content,
                "admin_user_id": chat.admin_user_id,
                "is_read": chat.is_read,
                "message_id": chat.message_id,
                "reply_token": chat.reply_token,
                "session_id": chat.session_id,
                "extra_data": chat.extra_data,
                "timestamp": chat.timestamp.isoformat() if chat.timestamp else None
            })
        print(f"    ‚úì ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å {len(chats)} messages")
        
        # Export FriendActivity
        print("  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å FriendActivity...")
        result = await session.execute(select(FriendActivity))
        activities = result.scalars().all()
        for activity in activities:
            data["friend_activity"].append({
                "id": activity.id,
                "user_id": activity.user_id,
                "activity_type": activity.activity_type,
                "user_profile": activity.user_profile,
                "source": activity.source,
                "event_data": activity.event_data,
                "timestamp": activity.timestamp.isoformat() if activity.timestamp else None
            })
        print(f"    ‚úì ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å {len(activities)} activities")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
    filename = f"sqlite_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {filename}")
    await sqlite_engine.dispose()
    return filename, data

async def setup_postgresql():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô PostgreSQL"""
    print("\nüîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PostgreSQL...")
    
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        raise Exception("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DATABASE_URL ‡πÉ‡∏ô environment variables")
    
    # ‡πÅ‡∏õ‡∏•‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö asyncpg
    if DATABASE_URL.startswith("postgresql://"):
        DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://", 1)
    
    print(f"  - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö: {DATABASE_URL.split('@')[1]}")  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô host
    
    engine = create_async_engine(DATABASE_URL, echo=False)
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        async with engine.begin() as conn:
            print("  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á...")
            await conn.run_sync(Base.metadata.create_all)
            print("  ‚úì ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
            result = await conn.execute(text("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            tables = [row[0] for row in result]
            print(f"  ‚úì ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {', '.join(tables)}")
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        raise
    finally:
        await engine.dispose()
    
    return engine

async def import_to_postgresql(filename: str, data: dict):
    """‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á PostgreSQL"""
    print(f"\nüì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á PostgreSQL...")
    
    DATABASE_URL = os.getenv("DATABASE_URL")
    if DATABASE_URL.startswith("postgresql://"):
        DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://", 1)
    
    engine = create_async_engine(DATABASE_URL, echo=False)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    async with async_session() as session:
        try:
            # Import UserStatus
            print("  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ UserStatus...")
            imported_users = 0
            for user_data in data["user_status"]:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                existing = await session.get(UserStatus, user_data["user_id"])
                if not existing:
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    if user_data.get("created_at"):
                        user_data["created_at"] = datetime.fromisoformat(user_data["created_at"])
                    if user_data.get("updated_at"):
                        user_data["updated_at"] = datetime.fromisoformat(user_data["updated_at"])
                    
                    user = UserStatus(**user_data)
                    session.add(user)
                    imported_users += 1
            await session.commit()
            print(f"    ‚úì ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {imported_users} users")
            
            # Import ChatHistory
            print("  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ChatHistory...")
            imported_chats = 0
            for chat_data in data["chat_history"]:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ chat ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                existing = await session.get(ChatHistory, chat_data["id"])
                if not existing:
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    if chat_data.get("timestamp"):
                        chat_data["timestamp"] = datetime.fromisoformat(chat_data["timestamp"])
                    
                    chat = ChatHistory(**chat_data)
                    session.add(chat)
                    imported_chats += 1
                    
                    # Commit ‡∏ó‡∏∏‡∏Å 100 records
                    if imported_chats % 100 == 0:
                        await session.commit()
                        print(f"    ... ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß {imported_chats} messages")
            
            await session.commit()
            print(f"    ‚úì ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {imported_chats} messages")
            
            # Import FriendActivity
            print("  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ FriendActivity...")
            imported_activities = 0
            for activity_data in data["friend_activity"]:
                existing = await session.get(FriendActivity, activity_data["id"])
                if not existing:
                    if activity_data.get("timestamp"):
                        activity_data["timestamp"] = datetime.fromisoformat(activity_data["timestamp"])
                    
                    activity = FriendActivity(**activity_data)
                    session.add(activity)
                    imported_activities += 1
            
            await session.commit()
            print(f"    ‚úì ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {imported_activities} activities")
            
            print("‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤: {e}")
            await session.rollback()
            raise
        finally:
            await engine.dispose()

async def verify_migration():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£ migration"""
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£ migration...")
    
    DATABASE_URL = os.getenv("DATABASE_URL")
    if DATABASE_URL.startswith("postgresql://"):
        DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://", 1)
    
    engine = create_async_engine(DATABASE_URL, echo=False)
    
    async with engine.connect() as conn:
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô records ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        tables = ['user_status', 'chat_history', 'friend_activity']
        for table in tables:
            result = await conn.execute(text(f"SELECT COUNT(*) FROM {table}"))
            count = result.scalar()
            print(f"  - {table}: {count} records")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        result = await conn.execute(text("""
            SELECT user_id, message_type, message_content, timestamp 
            FROM chat_history 
            ORDER BY timestamp DESC 
            LIMIT 5
        """))
        print("\n  üìã ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
        for row in result:
            print(f"    - [{row[3]}] {row[0]} ({row[1]}): {row[2][:50]}...")
    
    await engine.dispose()
    print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rollback"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Rollback to PostgreSQL")
    print("=" * 60)
    
    try:
        # 1. Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite
        filename, data = await export_sqlite_data()
        
        # 2. Setup PostgreSQL
        await setup_postgresql()
        
        # 3. Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ PostgreSQL
        await import_to_postgresql(filename, data)
        
        # 4. Verify migration
        await verify_migration()
        
        print("\n" + "=" * 60)
        print("‚úÖ Rollback ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        print("\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
        print("1. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó .env ‡πÉ‡∏ô Render ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ DATABASE_URL ‡∏Ç‡∏≠‡∏á PostgreSQL")
        print("2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DB_TYPE=postgresql")
        print("3. Deploy ‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô Render")
        
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
